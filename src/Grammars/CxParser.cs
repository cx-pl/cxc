//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/workspace/cx-pl/cxc/src/Grammars/CxParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CxCompiler.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Abstract=1, Alias=2, As=3, Async=4, Await=5, Base=6, Bool=7, Break=8, 
		Byte=9, Case=10, Catch=11, Char=12, Class=13, Concept=14, Const=15, Constructor=16, 
		Continue=17, Decimal=18, Default=19, Delegate=20, Do=21, Double=22, Else=23, 
		Enum=24, Extension=25, Extern=26, False=27, Final=28, Finally=29, Float=30, 
		Float32=31, Float64=32, For=33, Foreach=34, Get=35, If=36, In=37, Int=38, 
		Int8=39, Int16=40, Int32=41, Int64=42, Interface=43, Internal=44, Import=45, 
		Is=46, Long=47, Nameof=48, Namespace=49, New=50, Null=51, Object=52, Operator=53, 
		Out=54, Override=55, Params=56, Partial=57, Private=58, Protected=59, 
		Ptr=60, Public=61, Ref=62, Return=63, Sbyte=64, Set=65, Short=66, Sizeof=67, 
		Static=68, String=69, Struct=70, Switch=71, This=72, Throw=73, True=74, 
		Try=75, Typedef=76, Typeof=77, Uint=78, UInt8=79, UInt16=80, UInt32=81, 
		UInt64=82, Ulong=83, Ushort=84, Using=85, Var=86, Virtual=87, Void=88, 
		When=89, While=90, LeftParen=91, RightParen=92, LeftBracket=93, RightBracket=94, 
		LeftBrace=95, RightBrace=96, Less=97, LessEqual=98, Greater=99, GreaterEqual=100, 
		LeftShift=101, RightShift=102, Plus=103, PlusPlus=104, Minus=105, MinusMinus=106, 
		Star=107, Div=108, Mod=109, And=110, AndAnd=111, Or=112, OrOr=113, Xor=114, 
		Not=115, At=116, Tilde=117, Question=118, Colon=119, Semicolon=120, Comma=121, 
		Assign=122, StarAssign=123, DivAssign=124, ModAssign=125, PlusAssign=126, 
		MinusAssign=127, LeftShiftAssign=128, RightShiftAssign=129, AndAssign=130, 
		OrAssign=131, XorAssign=132, Equal=133, NotEqual=134, QuestionQuestion=135, 
		Arrow=136, PipeThen=137, PipeError=138, Dot=139, Identifier=140, IntegerLiteral=141, 
		FloatingLiteral=142, CharLiteral=143, StringLiteral=144, Whitespace=145, 
		BlockComment=146, LineComment=147;
	public const int
		RULE_compilationUnit = 0, RULE_importStatements = 1, RULE_importStatement = 2, 
		RULE_namespaceDeclaration = 3, RULE_topLevelDeclarations = 4, RULE_topLevelDeclaration = 5, 
		RULE_classModifiers = 6, RULE_classModifier = 7, RULE_visibilityModifier = 8, 
		RULE_classBase = 9, RULE_classBaseList = 10, RULE_classType = 11, RULE_classDeclaration = 12, 
		RULE_classDeclarationBody = 13, RULE_memberModifiers = 14, RULE_memberModifier = 15, 
		RULE_memberDeclaration = 16, RULE_fieldsDeclaration = 17, RULE_fieldInitializers = 18, 
		RULE_fieldInitializer = 19, RULE_propertyDeclaration = 20, RULE_propertyAccessorDeclarations = 21, 
		RULE_propertyAccessorDeclaration = 22, RULE_propertyParams = 23, RULE_propertyParam = 24, 
		RULE_propertyAccessorBody = 25, RULE_constructorDeclaration = 26, RULE_constructorOrBaseInvocation = 27, 
		RULE_functionDeclaration = 28, RULE_functionParameters = 29, RULE_functionParameter = 30, 
		RULE_functionBody = 31, RULE_typedefDeclaration = 32, RULE_extensionDeclaration = 33, 
		RULE_statements = 34, RULE_statement = 35, RULE_declarationStatement = 36, 
		RULE_localVariableDeclarationStatement = 37, RULE_localVariableDeclaration = 38, 
		RULE_variableDeclarations = 39, RULE_variableDeclaration = 40, RULE_embeddedStatement = 41, 
		RULE_expressionStatement = 42, RULE_ifStatement = 43, RULE_switchStatement = 44, 
		RULE_switchSection = 45, RULE_switchLabel = 46, RULE_switchLabelFilter = 47, 
		RULE_whileStatement = 48, RULE_doStatement = 49, RULE_forStatement = 50, 
		RULE_forInitializer = 51, RULE_forCheck = 52, RULE_forIterator = 53, RULE_foreachStatement = 54, 
		RULE_returnStatement = 55, RULE_throwStatement = 56, RULE_tryStatement = 57, 
		RULE_catchClauses = 58, RULE_exceptionFilter = 59, RULE_finallyClause = 60, 
		RULE_usingStatement = 61, RULE_expression = 62, RULE_assignmentExpression = 63, 
		RULE_assignOperator = 64, RULE_nonAssignmentExpression = 65, RULE_conditionalExpression = 66, 
		RULE_nullCoalescingExpression = 67, RULE_conditionalOrExpression = 68, 
		RULE_conditionalAndExpression = 69, RULE_inclusiveOrExpression = 70, RULE_exclusiveOrExpression = 71, 
		RULE_andExpression = 72, RULE_equalityExpression = 73, RULE_relationalExpression = 74, 
		RULE_shiftExpression = 75, RULE_additiveExpression = 76, RULE_multiplicativeExpression = 77, 
		RULE_unaryExpression = 78, RULE_primaryExpression = 79, RULE_primaryExpressionStart = 80, 
		RULE_arrayExpression = 81, RULE_memberAccess = 82, RULE_functionInvocation = 83, 
		RULE_functionInvocationArguments = 84, RULE_functionInvocationArgument = 85, 
		RULE_throwableExpression = 86, RULE_throwExpression = 87, RULE_annotations = 88, 
		RULE_annotation = 89, RULE_typeNameOrVoid = 90, RULE_typeName = 91, RULE_arrayDimension = 92, 
		RULE_genericParams = 93, RULE_genericParamList = 94, RULE_builtInType = 95, 
		RULE_integerType = 96, RULE_floatingType = 97, RULE_textualType = 98, 
		RULE_qualifiedIdentifier = 99, RULE_literal = 100, RULE_booleanLiteral = 101;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importStatements", "importStatement", "namespaceDeclaration", 
		"topLevelDeclarations", "topLevelDeclaration", "classModifiers", "classModifier", 
		"visibilityModifier", "classBase", "classBaseList", "classType", "classDeclaration", 
		"classDeclarationBody", "memberModifiers", "memberModifier", "memberDeclaration", 
		"fieldsDeclaration", "fieldInitializers", "fieldInitializer", "propertyDeclaration", 
		"propertyAccessorDeclarations", "propertyAccessorDeclaration", "propertyParams", 
		"propertyParam", "propertyAccessorBody", "constructorDeclaration", "constructorOrBaseInvocation", 
		"functionDeclaration", "functionParameters", "functionParameter", "functionBody", 
		"typedefDeclaration", "extensionDeclaration", "statements", "statement", 
		"declarationStatement", "localVariableDeclarationStatement", "localVariableDeclaration", 
		"variableDeclarations", "variableDeclaration", "embeddedStatement", "expressionStatement", 
		"ifStatement", "switchStatement", "switchSection", "switchLabel", "switchLabelFilter", 
		"whileStatement", "doStatement", "forStatement", "forInitializer", "forCheck", 
		"forIterator", "foreachStatement", "returnStatement", "throwStatement", 
		"tryStatement", "catchClauses", "exceptionFilter", "finallyClause", "usingStatement", 
		"expression", "assignmentExpression", "assignOperator", "nonAssignmentExpression", 
		"conditionalExpression", "nullCoalescingExpression", "conditionalOrExpression", 
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression", 
		"andExpression", "equalityExpression", "relationalExpression", "shiftExpression", 
		"additiveExpression", "multiplicativeExpression", "unaryExpression", "primaryExpression", 
		"primaryExpressionStart", "arrayExpression", "memberAccess", "functionInvocation", 
		"functionInvocationArguments", "functionInvocationArgument", "throwableExpression", 
		"throwExpression", "annotations", "annotation", "typeNameOrVoid", "typeName", 
		"arrayDimension", "genericParams", "genericParamList", "builtInType", 
		"integerType", "floatingType", "textualType", "qualifiedIdentifier", "literal", 
		"booleanLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'alias'", "'as'", "'async'", "'await'", "'base'", 
		"'bool'", "'break'", "'byte'", "'case'", "'catch'", "'char'", "'class'", 
		"'concept'", "'const'", "'constructor'", "'continue'", "'decimal'", "'default'", 
		"'delegate'", "'do'", "'double'", "'else'", "'enum'", "'extension'", "'extern'", 
		"'false'", "'final'", "'finally'", "'float'", "'float32'", "'float64'", 
		"'for'", "'foreach'", "'get'", "'if'", "'in'", "'int'", "'int8'", "'int16'", 
		"'int32'", "'int64'", "'interface'", "'internal'", "'import'", "'is'", 
		"'long'", "'nameof'", "'namespace'", "'new'", "'null'", "'object'", "'operator'", 
		"'out'", "'override'", "'params'", "'partial'", "'private'", "'protected'", 
		"'ptr'", "'public'", "'ref'", "'return'", "'sbyte'", "'set'", "'short'", 
		"'sizeof'", "'static'", "'string'", "'struct'", "'switch'", "'this'", 
		"'throw'", "'true'", "'try'", "'typedef'", "'typeof'", "'uint'", "'uint8'", 
		"'uint16'", "'uint32'", "'uint64'", "'ulong'", "'ushort'", "'using'", 
		"'var'", "'virtual'", "'void'", "'when'", "'while'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", 
		"'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", "'&&'", "'|'", "'||'", 
		"'^'", "'!'", "'@'", "'~'", "'?'", "':'", "';'", "','", "'='", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'|='", "'^='", 
		"'=='", "'!='", "'??'", "'=>'", "'|>'", "'->'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Abstract", "Alias", "As", "Async", "Await", "Base", "Bool", "Break", 
		"Byte", "Case", "Catch", "Char", "Class", "Concept", "Const", "Constructor", 
		"Continue", "Decimal", "Default", "Delegate", "Do", "Double", "Else", 
		"Enum", "Extension", "Extern", "False", "Final", "Finally", "Float", "Float32", 
		"Float64", "For", "Foreach", "Get", "If", "In", "Int", "Int8", "Int16", 
		"Int32", "Int64", "Interface", "Internal", "Import", "Is", "Long", "Nameof", 
		"Namespace", "New", "Null", "Object", "Operator", "Out", "Override", "Params", 
		"Partial", "Private", "Protected", "Ptr", "Public", "Ref", "Return", "Sbyte", 
		"Set", "Short", "Sizeof", "Static", "String", "Struct", "Switch", "This", 
		"Throw", "True", "Try", "Typedef", "Typeof", "Uint", "UInt8", "UInt16", 
		"UInt32", "UInt64", "Ulong", "Ushort", "Using", "Var", "Virtual", "Void", 
		"When", "While", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
		"Star", "Div", "Mod", "And", "AndAnd", "Or", "OrOr", "Xor", "Not", "At", 
		"Tilde", "Question", "Colon", "Semicolon", "Comma", "Assign", "StarAssign", 
		"DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
		"RightShiftAssign", "AndAssign", "OrAssign", "XorAssign", "Equal", "NotEqual", 
		"QuestionQuestion", "Arrow", "PipeThen", "PipeError", "Dot", "Identifier", 
		"IntegerLiteral", "FloatingLiteral", "CharLiteral", "StringLiteral", "Whitespace", 
		"BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CxParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementsContext importStatements() {
			return GetRuleContext<ImportStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext topLevelDeclarations() {
			return GetRuleContext<TopLevelDeclarationsContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Import) {
				{
				State = 204;
				importStatements();
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Namespace) {
				{
				State = 207;
				namespaceDeclaration();
				}
			}

			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4508278881869935250L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31445109L) != 0) || _la==Identifier) {
				{
				State = 210;
				topLevelDeclarations();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public ImportStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementsContext importStatements() {
		ImportStatementsContext _localctx = new ImportStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 213;
				importStatement();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Import );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public QualifiedIdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(CxParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(Import);
			State = 219;
			_localctx.name = qualifiedIdentifier(0);
			State = 220;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public QualifiedIdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CxParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(Namespace);
			State = 223;
			_localctx.name = qualifiedIdentifier(0);
			State = 224;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext[] topLevelDeclaration() {
			return GetRuleContexts<TopLevelDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext topLevelDeclaration(int i) {
			return GetRuleContext<TopLevelDeclarationContext>(i);
		}
		public TopLevelDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclarationsContext topLevelDeclarations() {
		TopLevelDeclarationsContext _localctx = new TopLevelDeclarationsContext(Context, State);
		EnterRule(_localctx, 8, RULE_topLevelDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 226;
				topLevelDeclaration();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4508278881869935250L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31445109L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefDeclarationContext typedefDeclaration() {
			return GetRuleContext<TypedefDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionDeclarationContext extensionDeclaration() {
			return GetRuleContext<ExtensionDeclarationContext>(0);
		}
		public TopLevelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclarationContext topLevelDeclaration() {
		TopLevelDeclarationContext _localctx = new TopLevelDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_topLevelDeclaration);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				functionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				typedefDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234;
				extensionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(Context, State);
		EnterRule(_localctx, 12, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3170551730123309058L) != 0) || _la==Static) {
				{
				{
				State = 237;
				classModifier();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityModifierContext visibilityModifier() {
			return GetRuleContext<VisibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(CxParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CxParser.Final, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CxParser.Static, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_classModifier);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Internal:
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				visibilityModifier();
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				Match(Abstract);
				}
				break;
			case Final:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				Match(Final);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				Match(Static);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(CxParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(CxParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(CxParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(CxParser.Internal, 0); }
		public VisibilityModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibilityModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityModifierContext visibilityModifier() {
		VisibilityModifierContext _localctx = new VisibilityModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_visibilityModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3170551729854873600L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBaseContext : ParserRuleContext {
		public ClassBaseListContext list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CxParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBaseListContext classBaseList() {
			return GetRuleContext<ClassBaseListContext>(0);
		}
		public ClassBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBaseContext classBase() {
		ClassBaseContext _localctx = new ClassBaseContext(Context, State);
		EnterRule(_localctx, 18, RULE_classBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(Colon);
			State = 252;
			_localctx.list = classBaseList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBaseListContext : ParserRuleContext {
		public ClassBaseListContext list;
		public TypeNameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CxParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBaseListContext classBaseList() {
			return GetRuleContext<ClassBaseListContext>(0);
		}
		public ClassBaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBaseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBaseListContext classBaseList() {
		return classBaseList(0);
	}

	private ClassBaseListContext classBaseList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ClassBaseListContext _localctx = new ClassBaseListContext(Context, _parentState);
		ClassBaseListContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_classBaseList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 255;
			_localctx.name = typeName();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ClassBaseListContext(_parentctx, _parentState);
					_localctx.list = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_classBaseList);
					State = 257;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 258;
					Match(Comma);
					State = 259;
					_localctx.name = typeName();
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CxParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CxParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(CxParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_classType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 144115189149597697L) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassModifiersContext modifiers;
		public IToken partial;
		public IToken name;
		public ClassBaseContext @base;
		public ClassDeclarationBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationBodyContext classDeclarationBody() {
			return GetRuleContext<ClassDeclarationBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(CxParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBaseContext classBase() {
			return GetRuleContext<ClassBaseContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.modifiers = classModifiers();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Partial) {
				{
				State = 268;
				_localctx.partial = Match(Partial);
				}
			}

			State = 271;
			classType();
			State = 272;
			_localctx.name = Match(Identifier);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 273;
				genericParams();
				}
			}

			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 276;
				_localctx.@base = classBase();
				}
			}

			State = 279;
			_localctx.body = classDeclarationBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationBodyContext : ParserRuleContext {
		public MemberDeclarationContext members;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CxParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CxParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public ClassDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclarationBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclarationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationBodyContext classDeclarationBody() {
		ClassDeclarationBodyContext _localctx = new ClassDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_classDeclarationBody);
		int _la;
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(LeftBrace);
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4508278881836446354L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31441013L) != 0) || _la==Identifier) {
					{
					{
					State = 282;
					_localctx.members = memberDeclaration();
					}
					}
					State = 287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 288;
				Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext[] memberModifier() {
			return GetRuleContexts<MemberModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext memberModifier(int i) {
			return GetRuleContext<MemberModifierContext>(i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(Context, State);
		EnterRule(_localctx, 28, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3206580527209381890L) != 0) || _la==Static || _la==Virtual) {
				{
				{
				State = 292;
				memberModifier();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityModifierContext visibilityModifier() {
			return GetRuleContext<VisibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(CxParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CxParser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Override() { return GetToken(CxParser.Override, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CxParser.Final, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CxParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CxParser.Extern, 0); }
		public MemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifierContext memberModifier() {
		MemberModifierContext _localctx = new MemberModifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberModifier);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Internal:
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				visibilityModifier();
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				Match(Abstract);
				}
				break;
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300;
				Match(Virtual);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301;
				Match(Override);
				}
				break;
			case Final:
				EnterOuterAlt(_localctx, 5);
				{
				State = 302;
				Match(Final);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 6);
				{
				State = 303;
				Match(Static);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 7);
				{
				State = 304;
				Match(Extern);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldsDeclarationContext fieldsDeclaration() {
			return GetRuleContext<FieldsDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_memberDeclaration);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				fieldsDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				propertyDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309;
				constructorDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 310;
				functionDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 311;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsDeclarationContext : ParserRuleContext {
		public MemberModifiersContext modifiers;
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializersContext fieldInitializers() {
			return GetRuleContext<FieldInitializersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public FieldsDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsDeclarationContext fieldsDeclaration() {
		FieldsDeclarationContext _localctx = new FieldsDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldsDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_localctx.modifiers = memberModifiers();
			State = 315;
			typeName();
			State = 316;
			fieldInitializers(0);
			State = 317;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerContext fieldInitializer() {
			return GetRuleContext<FieldInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializersContext fieldInitializers() {
			return GetRuleContext<FieldInitializersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CxParser.Comma, 0); }
		public FieldInitializersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializersContext fieldInitializers() {
		return fieldInitializers(0);
	}

	private FieldInitializersContext fieldInitializers(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FieldInitializersContext _localctx = new FieldInitializersContext(Context, _parentState);
		FieldInitializersContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_fieldInitializers, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 320;
			fieldInitializer();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FieldInitializersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_fieldInitializers);
					State = 322;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 323;
					Match(Comma);
					State = 324;
					fieldInitializer();
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(CxParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FieldInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerContext fieldInitializer() {
		FieldInitializerContext _localctx = new FieldInitializerContext(Context, State);
		EnterRule(_localctx, 38, RULE_fieldInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(Identifier);
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 331;
				Match(Equal);
				State = 332;
				literal();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public MemberModifiersContext modifiers;
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CxParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAccessorDeclarationsContext propertyAccessorDeclarations() {
			return GetRuleContext<PropertyAccessorDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CxParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_propertyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_localctx.modifiers = memberModifiers();
			State = 336;
			typeName();
			State = 337;
			Match(Identifier);
			State = 338;
			Match(LeftBrace);
			State = 339;
			propertyAccessorDeclarations();
			State = 340;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAccessorDeclarationContext[] propertyAccessorDeclaration() {
			return GetRuleContexts<PropertyAccessorDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAccessorDeclarationContext propertyAccessorDeclaration(int i) {
			return GetRuleContext<PropertyAccessorDeclarationContext>(i);
		}
		public PropertyAccessorDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessorDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAccessorDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorDeclarationsContext propertyAccessorDeclarations() {
		PropertyAccessorDeclarationsContext _localctx = new PropertyAccessorDeclarationsContext(Context, State);
		EnterRule(_localctx, 42, RULE_propertyAccessorDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 342;
				propertyAccessorDeclaration();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & 1125899907893249L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(CxParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAccessorBodyContext propertyAccessorBody() {
			return GetRuleContext<PropertyAccessorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CxParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CxParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyParamsContext propertyParams() {
			return GetRuleContext<PropertyParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(CxParser.Set, 0); }
		public PropertyAccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAccessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorDeclarationContext propertyAccessorDeclaration() {
		PropertyAccessorDeclarationContext _localctx = new PropertyAccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_propertyAccessorDeclaration);
		int _la;
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extern) {
					{
					State = 347;
					Match(Extern);
					}
				}

				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 350;
					Match(Const);
					}
				}

				State = 353;
				Match(Get);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 354;
					propertyParams();
					}
				}

				State = 357;
				propertyAccessorBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extern) {
					{
					State = 358;
					Match(Extern);
					}
				}

				State = 361;
				Match(Set);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 362;
					propertyParams();
					}
				}

				State = 365;
				propertyAccessorBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyParamContext[] propertyParam() {
			return GetRuleContexts<PropertyParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyParamContext propertyParam(int i) {
			return GetRuleContext<PropertyParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CxParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CxParser.Comma, i);
		}
		public PropertyParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParamsContext propertyParams() {
		PropertyParamsContext _localctx = new PropertyParamsContext(Context, State);
		EnterRule(_localctx, 46, RULE_propertyParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(LeftParen);
			State = 369;
			propertyParam();
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 370;
				Match(Comma);
				State = 371;
				propertyParam();
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 377;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PropertyParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParamContext propertyParam() {
		PropertyParamContext _localctx = new PropertyParamContext(Context, State);
		EnterRule(_localctx, 48, RULE_propertyParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 379;
				typeName();
				}
				break;
			}
			State = 382;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CxParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CxParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CxParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public PropertyAccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAccessorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorBodyContext propertyAccessorBody() {
		PropertyAccessorBodyContext _localctx = new PropertyAccessorBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_propertyAccessorBody);
		int _la;
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				Match(LeftBrace);
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8062419872050539872L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 83324841800748709L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
					{
					State = 385;
					statements(0);
					}
				}

				State = 388;
				Match(RightBrace);
				}
				break;
			case Arrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389;
				Match(Arrow);
				State = 390;
				statement();
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public MemberModifiersContext modifiers;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(CxParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorOrBaseInvocationContext constructorOrBaseInvocation() {
			return GetRuleContext<ConstructorOrBaseInvocationContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_localctx.modifiers = memberModifiers();
			State = 395;
			Match(Constructor);
			State = 396;
			Match(LeftParen);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & 5341868458529292581L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4611686018427388287L) != 0)) {
				{
				State = 397;
				functionParameters(0);
				}
			}

			State = 400;
			Match(RightParen);
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 401;
				constructorOrBaseInvocation();
				}
			}

			State = 404;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorOrBaseInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CxParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CxParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(CxParser.Base, 0); }
		public ConstructorOrBaseInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorOrBaseInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorOrBaseInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorOrBaseInvocationContext constructorOrBaseInvocation() {
		ConstructorOrBaseInvocationContext _localctx = new ConstructorOrBaseInvocationContext(Context, State);
		EnterRule(_localctx, 54, RULE_constructorOrBaseInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(Colon);
			State = 407;
			_la = TokenStream.LA(1);
			if ( !(_la==Base || _la==This) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 408;
			functionInvocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public MemberModifiersContext modifiers;
		public IToken async;
		public TypeNameOrVoidContext returnType;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameOrVoidContext typeNameOrVoid() {
			return GetRuleContext<TypeNameOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CxParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(CxParser.Async, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_localctx.modifiers = memberModifiers();
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 411;
				_localctx.async = Match(Async);
				}
			}

			State = 414;
			_localctx.returnType = typeNameOrVoid();
			State = 415;
			_localctx.name = Match(Identifier);
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 416;
				genericParams();
				}
			}

			State = 419;
			Match(LeftParen);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & 5341868458529292581L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4611686018427388287L) != 0)) {
				{
				State = 420;
				functionParameters(0);
				}
			}

			State = 423;
			Match(RightParen);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 424;
				Match(Const);
				}
			}

			State = 427;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CxParser.Comma, 0); }
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		return functionParameters(0);
	}

	private FunctionParametersContext functionParameters(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, _parentState);
		FunctionParametersContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_functionParameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 430;
			functionParameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FunctionParametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_functionParameters);
					State = 432;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 433;
					Match(Comma);
					State = 434;
					functionParameter();
					}
					} 
				}
				State = 439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public IToken name;
		public IToken defaultValue;
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Params() { return GetToken(CxParser.Params, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CxParser.Assign, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Params) {
				{
				State = 440;
				Match(Params);
				}
			}

			State = 443;
			typeName();
			State = 444;
			_localctx.name = Match(Identifier);
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 445;
				_localctx.defaultValue = Match(Assign);
				State = 446;
				literal();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CxParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CxParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CxParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionBody);
		int _la;
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 449;
				Match(LeftBrace);
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8062419872050539872L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 83324841800748709L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
					{
					State = 450;
					statements(0);
					}
				}

				State = 453;
				Match(RightBrace);
				}
				break;
			case Arrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				Match(Arrow);
				State = 455;
				statement();
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 3);
				{
				State = 456;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CxParser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CxParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public TypedefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclarationContext typedefDeclaration() {
		TypedefDeclarationContext _localctx = new TypedefDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_typedefDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(Typedef);
			State = 460;
			Match(Identifier);
			State = 461;
			Match(Assign);
			State = 462;
			qualifiedIdentifier(0);
			State = 463;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionDeclarationContext : ParserRuleContext {
		public IToken name;
		public ClassBaseContext @base;
		public ClassDeclarationBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extension() { return GetToken(CxParser.Extension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBaseContext classBase() {
			return GetRuleContext<ClassBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationBodyContext classDeclarationBody() {
			return GetRuleContext<ClassDeclarationBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityModifierContext visibilityModifier() {
			return GetRuleContext<VisibilityModifierContext>(0);
		}
		public ExtensionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionDeclarationContext extensionDeclaration() {
		ExtensionDeclarationContext _localctx = new ExtensionDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_extensionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3170551729854873600L) != 0)) {
				{
				State = 465;
				visibilityModifier();
				}
			}

			State = 468;
			Match(Extension);
			State = 469;
			_localctx.name = Match(Identifier);
			State = 470;
			_localctx.@base = classBase();
			State = 471;
			_localctx.body = classDeclarationBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		return statements(0);
	}

	private StatementsContext statements(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementsContext _localctx = new StatementsContext(Context, _parentState);
		StatementsContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_statements, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 474;
			statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 480;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statements);
					State = 476;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 477;
					statement();
					}
					} 
				}
				State = 482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_statement);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				declarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				embeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			localVariableDeclarationStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			localVariableDeclaration();
			State = 490;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationsContext variableDeclarations() {
			return GetRuleContext<VariableDeclarationsContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			typeName();
			State = 493;
			variableDeclarations(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationsContext variableDeclarations() {
			return GetRuleContext<VariableDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CxParser.Comma, 0); }
		public VariableDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationsContext variableDeclarations() {
		return variableDeclarations(0);
	}

	private VariableDeclarationsContext variableDeclarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VariableDeclarationsContext _localctx = new VariableDeclarationsContext(Context, _parentState);
		VariableDeclarationsContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_variableDeclarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 496;
			variableDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 503;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VariableDeclarationsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_variableDeclarations);
					State = 498;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 499;
					Match(Comma);
					State = 500;
					variableDeclaration();
					}
					} 
				}
				State = 505;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CxParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_variableDeclaration);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507;
				Match(Identifier);
				State = 508;
				Match(Assign);
				State = 509;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingStatementContext usingStatement() {
			return GetRuleContext<UsingStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CxParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CxParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_embeddedStatement);
		int _la;
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Await:
			case False:
			case New:
			case Null:
			case True:
			case LeftParen:
			case Plus:
			case PlusPlus:
			case Minus:
			case MinusMinus:
			case Not:
			case Tilde:
			case Identifier:
			case IntegerLiteral:
			case FloatingLiteral:
			case CharLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512;
				expressionStatement();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				ifStatement();
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 3);
				{
				State = 514;
				switchStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 515;
				whileStatement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 5);
				{
				State = 516;
				doStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 6);
				{
				State = 517;
				forStatement();
				}
				break;
			case Foreach:
				EnterOuterAlt(_localctx, 7);
				{
				State = 518;
				foreachStatement();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 8);
				{
				State = 519;
				returnStatement();
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 9);
				{
				State = 520;
				throwStatement();
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 10);
				{
				State = 521;
				tryStatement();
				}
				break;
			case Using:
				EnterOuterAlt(_localctx, 11);
				{
				State = 522;
				usingStatement();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 12);
				{
				State = 523;
				Match(LeftBrace);
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8062419872050539872L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 83324841800748709L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
					{
					State = 524;
					statements(0);
					}
				}

				State = 527;
				Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 13);
				{
				State = 528;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			expression();
			State = 532;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CxParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext[] embeddedStatement() {
			return GetRuleContexts<EmbeddedStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement(int i) {
			return GetRuleContext<EmbeddedStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CxParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(If);
			State = 535;
			Match(LeftParen);
			State = 536;
			expression();
			State = 537;
			Match(RightParen);
			State = 538;
			embeddedStatement();
			State = 541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 539;
				Match(Else);
				State = 540;
				embeddedStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CxParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CxParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CxParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			Match(Switch);
			State = 544;
			Match(LeftParen);
			State = 545;
			expression();
			State = 546;
			Match(RightParen);
			State = 547;
			Match(LeftBrace);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Case || _la==Default) {
				{
				{
				State = 548;
				switchSection();
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 554;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext switchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 90, RULE_switchSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 556;
				switchLabel();
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case || _la==Default );
			State = 561;
			statements(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CxParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CxParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelFilterContext switchLabelFilter() {
			return GetRuleContext<SwitchLabelFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CxParser.Default, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 92, RULE_switchLabel);
		int _la;
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563;
				Match(Case);
				State = 564;
				expression();
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==When) {
					{
					State = 565;
					switchLabelFilter();
					}
				}

				State = 568;
				Match(Colon);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 570;
				Match(Default);
				State = 571;
				Match(Colon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode When() { return GetToken(CxParser.When, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchLabelFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabelFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabelFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelFilterContext switchLabelFilter() {
		SwitchLabelFilterContext _localctx = new SwitchLabelFilterContext(Context, State);
		EnterRule(_localctx, 94, RULE_switchLabelFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(When);
			State = 575;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CxParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(While);
			State = 578;
			Match(LeftParen);
			State = 579;
			expression();
			State = 580;
			Match(RightParen);
			State = 581;
			embeddedStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CxParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CxParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(Do);
			State = 584;
			embeddedStatement();
			State = 585;
			Match(While);
			State = 586;
			Match(LeftParen);
			State = 587;
			expression();
			State = 588;
			Match(RightParen);
			State = 589;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CxParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(CxParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(CxParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForCheckContext forCheck() {
			return GetRuleContext<ForCheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIteratorContext forIterator() {
			return GetRuleContext<ForIteratorContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(For);
			State = 592;
			Match(LeftParen);
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1160952070312858272L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 11267245546128421L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
				{
				State = 593;
				forInitializer();
				}
			}

			State = 596;
			Match(Semicolon);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699854745632L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 11003169472513L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
				{
				State = 597;
				forCheck();
				}
			}

			State = 600;
			Match(Semicolon);
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699854745632L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 11003169472513L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
				{
				State = 601;
				forIterator();
				}
			}

			State = 604;
			Match(RightParen);
			State = 605;
			embeddedStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CxParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CxParser.Comma, i);
		}
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext forInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 102, RULE_forInitializer);
		int _la;
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608;
				expression();
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 609;
					Match(Comma);
					State = 610;
					expression();
					}
					}
					State = 615;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForCheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForCheckContext forCheck() {
		ForCheckContext _localctx = new ForCheckContext(Context, State);
		EnterRule(_localctx, 104, RULE_forCheck);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CxParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CxParser.Comma, i);
		}
		public ForIteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorContext forIterator() {
		ForIteratorContext _localctx = new ForIteratorContext(Context, State);
		EnterRule(_localctx, 106, RULE_forIterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			expression();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 621;
				Match(Comma);
				State = 622;
				expression();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Foreach() { return GetToken(CxParser.Foreach, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(CxParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(Foreach);
			State = 629;
			Match(LeftParen);
			State = 630;
			typeName();
			State = 631;
			Match(Identifier);
			State = 632;
			Match(In);
			State = 633;
			expression();
			State = 634;
			Match(RightParen);
			State = 635;
			embeddedStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CxParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(Return);
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699854745632L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 11003169472513L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
				{
				State = 638;
				expression();
				}
			}

			State = 641;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CxParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CxParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_throwStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(Throw);
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699854745632L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 11003169472513L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
				{
				State = 644;
				expression();
				}
			}

			State = 647;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CxParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClausesContext catchClauses() {
			return GetRuleContext<CatchClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(Try);
			State = 650;
			embeddedStatement();
			State = 656;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 651;
				catchClauses();
				State = 653;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 652;
					finallyClause();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 655;
				finallyClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(CxParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionFilterContext exceptionFilter() {
			return GetRuleContext<ExceptionFilterContext>(0);
		}
		public CatchClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClausesContext catchClauses() {
		CatchClausesContext _localctx = new CatchClausesContext(Context, State);
		EnterRule(_localctx, 116, RULE_catchClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(Catch);
			State = 659;
			Match(LeftParen);
			State = 660;
			typeName();
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 661;
				Match(Identifier);
				}
			}

			State = 664;
			Match(RightParen);
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==When) {
				{
				State = 665;
				exceptionFilter();
				}
			}

			State = 668;
			statements(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode When() { return GetToken(CxParser.When, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		public ExceptionFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionFilterContext exceptionFilter() {
		ExceptionFilterContext _localctx = new ExceptionFilterContext(Context, State);
		EnterRule(_localctx, 118, RULE_exceptionFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(When);
			State = 671;
			Match(LeftParen);
			State = 672;
			expression();
			State = 673;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(CxParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 120, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(Finally);
			State = 676;
			statements(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CxParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(Using);
			State = 679;
			Match(LeftParen);
			State = 680;
			expression();
			State = 681;
			Match(RightParen);
			State = 682;
			embeddedStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_expression);
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685;
				nonAssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOperatorContext assignOperator() {
			return GetRuleContext<AssignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			qualifiedIdentifier(0);
			State = 689;
			assignOperator();
			State = 690;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CxParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CxParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CxParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CxParser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CxParser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CxParser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CxParser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CxParser.OrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CxParser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CxParser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CxParser.RightShiftAssign, 0); }
		public AssignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperatorContext assignOperator() {
		AssignOperatorContext _localctx = new AssignOperatorContext(Context, State);
		EnterRule(_localctx, 128, RULE_assignOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 2047L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public NonAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAssignmentExpressionContext nonAssignmentExpression() {
		NonAssignmentExpressionContext _localctx = new NonAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_nonAssignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullCoalescingExpressionContext nullCoalescingExpression() {
			return GetRuleContext<NullCoalescingExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CxParser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowableExpressionContext[] throwableExpression() {
			return GetRuleContexts<ThrowableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowableExpressionContext throwableExpression(int i) {
			return GetRuleContext<ThrowableExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CxParser.Colon, 0); }
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			nullCoalescingExpression();
			State = 702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 697;
				Match(Question);
				State = 698;
				throwableExpression();
				State = 699;
				Match(Colon);
				State = 700;
				throwableExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullCoalescingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionQuestion() { return GetToken(CxParser.QuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullCoalescingExpressionContext nullCoalescingExpression() {
			return GetRuleContext<NullCoalescingExpressionContext>(0);
		}
		public NullCoalescingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullCoalescingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullCoalescingExpressionContext nullCoalescingExpression() {
		NullCoalescingExpressionContext _localctx = new NullCoalescingExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_nullCoalescingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			conditionalOrExpression();
			State = 707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 705;
				Match(QuestionQuestion);
				State = 706;
				nullCoalescingExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CxParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CxParser.OrOr, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_conditionalOrExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			conditionalAndExpression();
			State = 714;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 710;
					Match(OrOr);
					State = 711;
					conditionalAndExpression();
					}
					} 
				}
				State = 716;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CxParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CxParser.AndAnd, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 138, RULE_conditionalAndExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			inclusiveOrExpression();
			State = 722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 718;
					Match(AndAnd);
					State = 719;
					inclusiveOrExpression();
					}
					} 
				}
				State = 724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CxParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CxParser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_inclusiveOrExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			exclusiveOrExpression();
			State = 730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 726;
					Match(Or);
					State = 727;
					exclusiveOrExpression();
					}
					} 
				}
				State = 732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Xor() { return GetTokens(CxParser.Xor); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor(int i) {
			return GetToken(CxParser.Xor, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_exclusiveOrExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			andExpression();
			State = 738;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 734;
					Match(Xor);
					State = 735;
					andExpression();
					}
					} 
				}
				State = 740;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CxParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CxParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_andExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			equalityExpression();
			State = 746;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 742;
					Match(And);
					State = 743;
					equalityExpression();
					}
					} 
				}
				State = 748;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CxParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CxParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CxParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CxParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_equalityExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			relationalExpression();
			State = 754;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 750;
					_la = TokenStream.LA(1);
					if ( !(_la==Equal || _la==NotEqual) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 751;
					relationalExpression();
					}
					} 
				}
				State = 756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CxParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CxParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CxParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CxParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CxParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CxParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CxParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CxParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_relationalExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			shiftExpression();
			State = 762;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 758;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 15L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 759;
					shiftExpression();
					}
					} 
				}
				State = 764;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftShift() { return GetTokens(CxParser.LeftShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift(int i) {
			return GetToken(CxParser.LeftShift, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightShift() { return GetTokens(CxParser.RightShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift(int i) {
			return GetToken(CxParser.RightShift, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_shiftExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			additiveExpression();
			State = 770;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 766;
					_la = TokenStream.LA(1);
					if ( !(_la==LeftShift || _la==RightShift) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 767;
					additiveExpression();
					}
					} 
				}
				State = 772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CxParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CxParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CxParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CxParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			multiplicativeExpression();
			State = 778;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 774;
					_la = TokenStream.LA(1);
					if ( !(_la==Plus || _la==Minus) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 775;
					multiplicativeExpression();
					}
					} 
				}
				State = 780;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CxParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CxParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CxParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CxParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CxParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CxParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_multiplicativeExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			unaryExpression();
			State = 786;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 782;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 783;
					unaryExpression();
					}
					} 
				}
				State = 788;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CxParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CxParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CxParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CxParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CxParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CxParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(CxParser.Await, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_unaryExpression);
		try {
			State = 809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case New:
			case Null:
			case True:
			case Identifier:
			case IntegerLiteral:
			case FloatingLiteral:
			case CharLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				primaryExpression();
				}
				break;
			case Plus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				Match(Plus);
				State = 791;
				unaryExpression();
				}
				break;
			case Minus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 792;
				Match(Minus);
				State = 793;
				unaryExpression();
				}
				break;
			case Not:
				EnterOuterAlt(_localctx, 4);
				{
				State = 794;
				Match(Not);
				State = 795;
				unaryExpression();
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 5);
				{
				State = 796;
				Match(Tilde);
				State = 797;
				unaryExpression();
				}
				break;
			case PlusPlus:
				EnterOuterAlt(_localctx, 6);
				{
				State = 798;
				Match(PlusPlus);
				State = 799;
				unaryExpression();
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 7);
				{
				State = 800;
				Match(MinusMinus);
				State = 801;
				unaryExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 8);
				{
				State = 802;
				Match(LeftParen);
				State = 803;
				typeName();
				State = 804;
				Match(RightParen);
				State = 805;
				unaryExpression();
				}
				break;
			case Await:
				EnterOuterAlt(_localctx, 9);
				{
				State = 807;
				Match(Await);
				State = 808;
				unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpressionContext[] arrayExpression() {
			return GetRuleContexts<ArrayExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpressionContext arrayExpression(int i) {
			return GetRuleContext<ArrayExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext[] functionInvocation() {
			return GetRuleContexts<FunctionInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation(int i) {
			return GetRuleContext<FunctionInvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(CxParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(CxParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(CxParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(CxParser.MinusMinus, i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_primaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			primaryExpressionStart();
			State = 815;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 812;
					arrayExpression();
					}
					} 
				}
				State = 817;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			State = 832;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 822;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Dot:
						{
						State = 818;
						memberAccess();
						}
						break;
					case LeftParen:
						{
						State = 819;
						functionInvocation();
						}
						break;
					case PlusPlus:
						{
						State = 820;
						Match(PlusPlus);
						}
						break;
					case MinusMinus:
						{
						State = 821;
						Match(MinusMinus);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 827;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 824;
							arrayExpression();
							}
							} 
						}
						State = 829;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
					}
					}
					} 
				}
				State = 834;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CxParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpressionStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext primaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 160, RULE_primaryExpressionStart);
		try {
			State = 841;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case Null:
			case True:
			case IntegerLiteral:
			case FloatingLiteral:
			case CharLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 835;
				literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 836;
				qualifiedIdentifier(0);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 3);
				{
				State = 837;
				Match(New);
				State = 838;
				typeName();
				State = 839;
				functionInvocation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CxParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CxParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CxParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CxParser.Comma, i);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayExpressionContext arrayExpression() {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_arrayExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			Match(LeftBracket);
			State = 844;
			expression();
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 845;
				Match(Comma);
				State = 846;
				expression();
				}
				}
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 852;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CxParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 164, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(Dot);
			State = 855;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CxParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CxParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationArgumentsContext functionInvocationArguments() {
			return GetRuleContext<FunctionInvocationArgumentsContext>(0);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(Context, State);
		EnterRule(_localctx, 166, RULE_functionInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			Match(LeftParen);
			State = 859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699854745632L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 11003169472513L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 31L) != 0)) {
				{
				State = 858;
				functionInvocationArguments(0);
				}
			}

			State = 861;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationArgumentContext functionInvocationArgument() {
			return GetRuleContext<FunctionInvocationArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationArgumentsContext functionInvocationArguments() {
			return GetRuleContext<FunctionInvocationArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CxParser.Comma, 0); }
		public FunctionInvocationArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocationArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocationArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationArgumentsContext functionInvocationArguments() {
		return functionInvocationArguments(0);
	}

	private FunctionInvocationArgumentsContext functionInvocationArguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FunctionInvocationArgumentsContext _localctx = new FunctionInvocationArgumentsContext(Context, _parentState);
		FunctionInvocationArgumentsContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_functionInvocationArguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 864;
			functionInvocationArgument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 871;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FunctionInvocationArgumentsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_functionInvocationArguments);
					State = 866;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 867;
					Match(Comma);
					State = 868;
					functionInvocationArgument();
					}
					} 
				}
				State = 873;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionInvocationArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CxParser.Colon, 0); }
		public FunctionInvocationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocationArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationArgumentContext functionInvocationArgument() {
		FunctionInvocationArgumentContext _localctx = new FunctionInvocationArgumentContext(Context, State);
		EnterRule(_localctx, 170, RULE_functionInvocationArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 874;
				Match(Identifier);
				State = 875;
				Match(Colon);
				}
				break;
			}
			State = 878;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public ThrowableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowableExpressionContext throwableExpression() {
		ThrowableExpressionContext _localctx = new ThrowableExpressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_throwableExpression);
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Await:
			case False:
			case New:
			case Null:
			case True:
			case LeftParen:
			case Plus:
			case PlusPlus:
			case Minus:
			case MinusMinus:
			case Not:
			case Tilde:
			case Identifier:
			case IntegerLiteral:
			case FloatingLiteral:
			case CharLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 880;
				expression();
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881;
				throwExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CxParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExpressionContext throwExpression() {
		ThrowExpressionContext _localctx = new ThrowExpressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_throwExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			Match(Throw);
			State = 886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 885;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 176, RULE_annotations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 888;
				annotation();
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==At );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(CxParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 178, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			Match(At);
			State = 894;
			qualifiedIdentifier(0);
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 895;
				functionInvocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameOrVoidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CxParser.Void, 0); }
		public TypeNameOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameOrVoid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameOrVoidContext typeNameOrVoid() {
		TypeNameOrVoidContext _localctx = new TypeNameOrVoidContext(Context, State);
		EnterRule(_localctx, 180, RULE_typeNameOrVoid);
		try {
			State = 900;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case Byte:
			case Char:
			case Const:
			case Double:
			case Float:
			case Float32:
			case Float64:
			case Int:
			case Int8:
			case Int16:
			case Int32:
			case Int64:
			case Long:
			case Object:
			case Ptr:
			case Sbyte:
			case Short:
			case String:
			case Uint:
			case UInt8:
			case UInt16:
			case UInt32:
			case UInt64:
			case Ulong:
			case Ushort:
			case Var:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 898;
				typeName();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 899;
				Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public QualifiedIdentifierContext namedType;
		public IToken autoVarType;
		public IToken autoConstType;
		[System.Diagnostics.DebuggerNonUserCode] public BuiltInTypeContext builtInType() {
			return GetRuleContext<BuiltInTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CxParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDimensionContext[] arrayDimension() {
			return GetRuleContexts<ArrayDimensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDimensionContext arrayDimension(int i) {
			return GetRuleContext<ArrayDimensionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CxParser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(CxParser.Var, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 182, RULE_typeName);
		int _la;
		try {
			int _alt;
			State = 933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 902;
					Match(Const);
					}
				}

				State = 905;
				builtInType();
				State = 909;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 906;
						arrayDimension();
						}
						} 
					}
					State = 911;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				}
				State = 913;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 912;
					Match(Question);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 915;
					Match(Const);
					}
				}

				State = 918;
				_localctx.namedType = qualifiedIdentifier(0);
				State = 920;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 919;
					genericParams();
					}
					break;
				}
				State = 925;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 922;
						arrayDimension();
						}
						} 
					}
					State = 927;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
				}
				State = 929;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 928;
					Match(Question);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 931;
				_localctx.autoVarType = Match(Var);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 932;
				_localctx.autoConstType = Match(Const);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CxParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CxParser.RightBracket, 0); }
		public ArrayDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimensionContext arrayDimension() {
		ArrayDimensionContext _localctx = new ArrayDimensionContext(Context, State);
		EnterRule(_localctx, 184, RULE_arrayDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			Match(LeftBracket);
			State = 936;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CxParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamListContext genericParamList() {
			return GetRuleContext<GenericParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CxParser.Greater, 0); }
		public GenericParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamsContext genericParams() {
		GenericParamsContext _localctx = new GenericParamsContext(Context, State);
		EnterRule(_localctx, 186, RULE_genericParams);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			Match(Less);
			State = 939;
			genericParamList(0);
			State = 940;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamListContext genericParamList() {
			return GetRuleContext<GenericParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CxParser.Comma, 0); }
		public GenericParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParamList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamListContext genericParamList() {
		return genericParamList(0);
	}

	private GenericParamListContext genericParamList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		GenericParamListContext _localctx = new GenericParamListContext(Context, _parentState);
		GenericParamListContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_genericParamList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 943;
			Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 950;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GenericParamListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_genericParamList);
					State = 945;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 946;
					Match(Comma);
					State = 947;
					Match(Identifier);
					}
					} 
				}
				State = 952;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BuiltInTypeContext : ParserRuleContext {
		public IToken objectType;
		public IToken ptrType;
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingTypeContext floatingType() {
			return GetRuleContext<FloatingTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextualTypeContext textualType() {
			return GetRuleContext<TextualTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Object() { return GetToken(CxParser.Object, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ptr() { return GetToken(CxParser.Ptr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		public BuiltInTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInTypeContext builtInType() {
		BuiltInTypeContext _localctx = new BuiltInTypeContext(Context, State);
		EnterRule(_localctx, 190, RULE_builtInType);
		try {
			State = 961;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case Byte:
			case Int:
			case Int8:
			case Int16:
			case Int32:
			case Int64:
			case Long:
			case Sbyte:
			case Short:
			case Uint:
			case UInt8:
			case UInt16:
			case UInt32:
			case UInt64:
			case Ulong:
			case Ushort:
				EnterOuterAlt(_localctx, 1);
				{
				State = 953;
				integerType();
				}
				break;
			case Double:
			case Float:
			case Float32:
			case Float64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 954;
				floatingType();
				}
				break;
			case Char:
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 955;
				textualType();
				}
				break;
			case Object:
				EnterOuterAlt(_localctx, 4);
				{
				State = 956;
				_localctx.objectType = Match(Object);
				}
				break;
			case Ptr:
				EnterOuterAlt(_localctx, 5);
				{
				State = 957;
				_localctx.ptrType = Match(Ptr);
				State = 959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 958;
					genericParams();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CxParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byte() { return GetToken(CxParser.Byte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sbyte() { return GetToken(CxParser.Sbyte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CxParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ushort() { return GetToken(CxParser.Ushort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CxParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uint() { return GetToken(CxParser.Uint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CxParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ulong() { return GetToken(CxParser.Ulong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int8() { return GetToken(CxParser.Int8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int16() { return GetToken(CxParser.Int16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32() { return GetToken(CxParser.Int32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64() { return GetToken(CxParser.Int64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt8() { return GetToken(CxParser.UInt8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt16() { return GetToken(CxParser.UInt16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt32() { return GetToken(CxParser.UInt32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt64() { return GetToken(CxParser.UInt64, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 192, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 149258703471232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2080773L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CxParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CxParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float32() { return GetToken(CxParser.Float32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float64() { return GetToken(CxParser.Float64, 0); }
		public FloatingTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingTypeContext floatingType() {
		FloatingTypeContext _localctx = new FloatingTypeContext(Context, State);
		EnterRule(_localctx, 194, RULE_floatingType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7520387072L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextualTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CxParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CxParser.String, 0); }
		public TextualTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textualType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextualType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextualTypeContext textualType() {
		TextualTypeContext _localctx = new TextualTypeContext(Context, State);
		EnterRule(_localctx, 196, RULE_textualType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			_la = TokenStream.LA(1);
			if ( !(_la==Char || _la==String) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
	 
		public QualifiedIdentifierContext() { }
		public virtual void CopyFrom(QualifiedIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleIdentifierContext : QualifiedIdentifierContext {
		public IToken identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		public SimpleIdentifierContext(QualifiedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CombinedQualifiedIdentifierContext : QualifiedIdentifierContext {
		public QualifiedIdentifierContext baseQualifiedIdentifier;
		public IToken identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CxParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CxParser.Identifier, 0); }
		public CombinedQualifiedIdentifierContext(QualifiedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombinedQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		return qualifiedIdentifier(0);
	}

	private QualifiedIdentifierContext qualifiedIdentifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, _parentState);
		QualifiedIdentifierContext _prevctx = _localctx;
		int _startState = 198;
		EnterRecursionRule(_localctx, 198, RULE_qualifiedIdentifier, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 970;
			((SimpleIdentifierContext)_localctx).identifier = Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CombinedQualifiedIdentifierContext(new QualifiedIdentifierContext(_parentctx, _parentState));
					((CombinedQualifiedIdentifierContext)_localctx).baseQualifiedIdentifier = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_qualifiedIdentifier);
					State = 972;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 973;
					Match(Dot);
					State = 974;
					((CombinedQualifiedIdentifierContext)_localctx).identifier = Match(Identifier);
					}
					} 
				}
				State = 979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(CxParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(CxParser.FloatingLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharLiteral() { return GetToken(CxParser.CharLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CxParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CxParser.Null, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_literal);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case True:
				EnterOuterAlt(_localctx, 1);
				{
				State = 980;
				booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 981;
				Match(IntegerLiteral);
				}
				break;
			case FloatingLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 982;
				Match(FloatingLiteral);
				}
				break;
			case CharLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 983;
				Match(CharLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 984;
				Match(StringLiteral);
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 6);
				{
				State = 985;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(CxParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(CxParser.False, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICxParserVisitor<TResult> typedVisitor = visitor as ICxParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 202, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			_la = TokenStream.LA(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return classBaseList_sempred((ClassBaseListContext)_localctx, predIndex);
		case 18: return fieldInitializers_sempred((FieldInitializersContext)_localctx, predIndex);
		case 29: return functionParameters_sempred((FunctionParametersContext)_localctx, predIndex);
		case 34: return statements_sempred((StatementsContext)_localctx, predIndex);
		case 39: return variableDeclarations_sempred((VariableDeclarationsContext)_localctx, predIndex);
		case 84: return functionInvocationArguments_sempred((FunctionInvocationArgumentsContext)_localctx, predIndex);
		case 94: return genericParamList_sempred((GenericParamListContext)_localctx, predIndex);
		case 99: return qualifiedIdentifier_sempred((QualifiedIdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool classBaseList_sempred(ClassBaseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool fieldInitializers_sempred(FieldInitializersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool functionParameters_sempred(FunctionParametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statements_sempred(StatementsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool variableDeclarations_sempred(VariableDeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool functionInvocationArguments_sempred(FunctionInvocationArgumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool genericParamList_sempred(GenericParamListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool qualifiedIdentifier_sempred(QualifiedIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,147,991,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,1,0,3,0,206,8,0,1,0,3,0,209,8,0,1,0,
		3,0,212,8,0,1,1,4,1,215,8,1,11,1,12,1,216,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
		1,3,1,4,4,4,228,8,4,11,4,12,4,229,1,5,1,5,1,5,1,5,3,5,236,8,5,1,6,5,6,
		239,8,6,10,6,12,6,242,9,6,1,7,1,7,1,7,1,7,3,7,248,8,7,1,8,1,8,1,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,261,8,10,10,10,12,10,264,9,10,1,
		11,1,11,1,12,1,12,3,12,270,8,12,1,12,1,12,1,12,3,12,275,8,12,1,12,3,12,
		278,8,12,1,12,1,12,1,13,1,13,5,13,284,8,13,10,13,12,13,287,9,13,1,13,1,
		13,3,13,291,8,13,1,14,5,14,294,8,14,10,14,12,14,297,9,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,3,15,306,8,15,1,16,1,16,1,16,1,16,1,16,3,16,313,8,
		16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,326,8,18,
		10,18,12,18,329,9,18,1,19,1,19,1,19,3,19,334,8,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,21,4,21,344,8,21,11,21,12,21,345,1,22,3,22,349,8,22,1,
		22,3,22,352,8,22,1,22,1,22,3,22,356,8,22,1,22,1,22,3,22,360,8,22,1,22,
		1,22,3,22,364,8,22,1,22,3,22,367,8,22,1,23,1,23,1,23,1,23,5,23,373,8,23,
		10,23,12,23,376,9,23,1,23,1,23,1,24,3,24,381,8,24,1,24,1,24,1,25,1,25,
		3,25,387,8,25,1,25,1,25,1,25,1,25,3,25,393,8,25,1,26,1,26,1,26,1,26,3,
		26,399,8,26,1,26,1,26,3,26,403,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
		1,28,3,28,413,8,28,1,28,1,28,1,28,3,28,418,8,28,1,28,1,28,3,28,422,8,28,
		1,28,1,28,3,28,426,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,436,
		8,29,10,29,12,29,439,9,29,1,30,3,30,442,8,30,1,30,1,30,1,30,1,30,3,30,
		448,8,30,1,31,1,31,3,31,452,8,31,1,31,1,31,1,31,1,31,3,31,458,8,31,1,32,
		1,32,1,32,1,32,1,32,1,32,1,33,3,33,467,8,33,1,33,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,1,34,5,34,479,8,34,10,34,12,34,482,9,34,1,35,1,35,3,
		35,486,8,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
		1,39,1,39,5,39,502,8,39,10,39,12,39,505,9,39,1,40,1,40,1,40,1,40,3,40,
		511,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,3,41,526,8,41,1,41,1,41,3,41,530,8,41,1,42,1,42,1,42,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,3,43,542,8,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,550,
		8,44,10,44,12,44,553,9,44,1,44,1,44,1,45,4,45,558,8,45,11,45,12,45,559,
		1,45,1,45,1,46,1,46,1,46,3,46,567,8,46,1,46,1,46,1,46,1,46,3,46,573,8,
		46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,50,1,50,1,50,3,50,595,8,50,1,50,1,50,3,50,599,8,50,
		1,50,1,50,3,50,603,8,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,612,8,
		51,10,51,12,51,615,9,51,3,51,617,8,51,1,52,1,52,1,53,1,53,1,53,5,53,624,
		8,53,10,53,12,53,627,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,55,1,55,3,55,640,8,55,1,55,1,55,1,56,1,56,3,56,646,8,56,1,56,1,56,1,
		57,1,57,1,57,1,57,3,57,654,8,57,1,57,3,57,657,8,57,1,58,1,58,1,58,1,58,
		3,58,663,8,58,1,58,1,58,3,58,667,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,
		59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,3,62,687,8,62,
		1,63,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
		3,66,703,8,66,1,67,1,67,1,67,3,67,708,8,67,1,68,1,68,1,68,5,68,713,8,68,
		10,68,12,68,716,9,68,1,69,1,69,1,69,5,69,721,8,69,10,69,12,69,724,9,69,
		1,70,1,70,1,70,5,70,729,8,70,10,70,12,70,732,9,70,1,71,1,71,1,71,5,71,
		737,8,71,10,71,12,71,740,9,71,1,72,1,72,1,72,5,72,745,8,72,10,72,12,72,
		748,9,72,1,73,1,73,1,73,5,73,753,8,73,10,73,12,73,756,9,73,1,74,1,74,1,
		74,5,74,761,8,74,10,74,12,74,764,9,74,1,75,1,75,1,75,5,75,769,8,75,10,
		75,12,75,772,9,75,1,76,1,76,1,76,5,76,777,8,76,10,76,12,76,780,9,76,1,
		77,1,77,1,77,5,77,785,8,77,10,77,12,77,788,9,77,1,78,1,78,1,78,1,78,1,
		78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
		78,1,78,3,78,810,8,78,1,79,1,79,5,79,814,8,79,10,79,12,79,817,9,79,1,79,
		1,79,1,79,1,79,3,79,823,8,79,1,79,5,79,826,8,79,10,79,12,79,829,9,79,5,
		79,831,8,79,10,79,12,79,834,9,79,1,80,1,80,1,80,1,80,1,80,1,80,3,80,842,
		8,80,1,81,1,81,1,81,1,81,5,81,848,8,81,10,81,12,81,851,9,81,1,81,1,81,
		1,82,1,82,1,82,1,83,1,83,3,83,860,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,
		84,1,84,5,84,870,8,84,10,84,12,84,873,9,84,1,85,1,85,3,85,877,8,85,1,85,
		1,85,1,86,1,86,3,86,883,8,86,1,87,1,87,3,87,887,8,87,1,88,4,88,890,8,88,
		11,88,12,88,891,1,89,1,89,1,89,3,89,897,8,89,1,90,1,90,3,90,901,8,90,1,
		91,3,91,904,8,91,1,91,1,91,5,91,908,8,91,10,91,12,91,911,9,91,1,91,3,91,
		914,8,91,1,91,3,91,917,8,91,1,91,1,91,3,91,921,8,91,1,91,5,91,924,8,91,
		10,91,12,91,927,9,91,1,91,3,91,930,8,91,1,91,1,91,3,91,934,8,91,1,92,1,
		92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,5,94,949,8,94,
		10,94,12,94,952,9,94,1,95,1,95,1,95,1,95,1,95,1,95,3,95,960,8,95,3,95,
		962,8,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,5,
		99,976,8,99,10,99,12,99,979,9,99,1,100,1,100,1,100,1,100,1,100,1,100,3,
		100,987,8,100,1,101,1,101,1,101,0,8,20,36,58,68,78,168,188,198,102,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,0,13,3,0,44,
		44,58,59,61,61,4,0,13,13,43,43,70,70,140,140,2,0,6,6,72,72,1,0,122,132,
		1,0,133,134,1,0,97,100,1,0,101,102,2,0,103,103,105,105,1,0,107,109,7,0,
		7,7,9,9,38,42,47,47,64,64,66,66,78,84,2,0,22,22,30,32,2,0,12,12,69,69,
		2,0,27,27,74,74,1038,0,205,1,0,0,0,2,214,1,0,0,0,4,218,1,0,0,0,6,222,1,
		0,0,0,8,227,1,0,0,0,10,235,1,0,0,0,12,240,1,0,0,0,14,247,1,0,0,0,16,249,
		1,0,0,0,18,251,1,0,0,0,20,254,1,0,0,0,22,265,1,0,0,0,24,267,1,0,0,0,26,
		290,1,0,0,0,28,295,1,0,0,0,30,305,1,0,0,0,32,312,1,0,0,0,34,314,1,0,0,
		0,36,319,1,0,0,0,38,330,1,0,0,0,40,335,1,0,0,0,42,343,1,0,0,0,44,366,1,
		0,0,0,46,368,1,0,0,0,48,380,1,0,0,0,50,392,1,0,0,0,52,394,1,0,0,0,54,406,
		1,0,0,0,56,410,1,0,0,0,58,429,1,0,0,0,60,441,1,0,0,0,62,457,1,0,0,0,64,
		459,1,0,0,0,66,466,1,0,0,0,68,473,1,0,0,0,70,485,1,0,0,0,72,487,1,0,0,
		0,74,489,1,0,0,0,76,492,1,0,0,0,78,495,1,0,0,0,80,510,1,0,0,0,82,529,1,
		0,0,0,84,531,1,0,0,0,86,534,1,0,0,0,88,543,1,0,0,0,90,557,1,0,0,0,92,572,
		1,0,0,0,94,574,1,0,0,0,96,577,1,0,0,0,98,583,1,0,0,0,100,591,1,0,0,0,102,
		616,1,0,0,0,104,618,1,0,0,0,106,620,1,0,0,0,108,628,1,0,0,0,110,637,1,
		0,0,0,112,643,1,0,0,0,114,649,1,0,0,0,116,658,1,0,0,0,118,670,1,0,0,0,
		120,675,1,0,0,0,122,678,1,0,0,0,124,686,1,0,0,0,126,688,1,0,0,0,128,692,
		1,0,0,0,130,694,1,0,0,0,132,696,1,0,0,0,134,704,1,0,0,0,136,709,1,0,0,
		0,138,717,1,0,0,0,140,725,1,0,0,0,142,733,1,0,0,0,144,741,1,0,0,0,146,
		749,1,0,0,0,148,757,1,0,0,0,150,765,1,0,0,0,152,773,1,0,0,0,154,781,1,
		0,0,0,156,809,1,0,0,0,158,811,1,0,0,0,160,841,1,0,0,0,162,843,1,0,0,0,
		164,854,1,0,0,0,166,857,1,0,0,0,168,863,1,0,0,0,170,876,1,0,0,0,172,882,
		1,0,0,0,174,884,1,0,0,0,176,889,1,0,0,0,178,893,1,0,0,0,180,900,1,0,0,
		0,182,933,1,0,0,0,184,935,1,0,0,0,186,938,1,0,0,0,188,942,1,0,0,0,190,
		961,1,0,0,0,192,963,1,0,0,0,194,965,1,0,0,0,196,967,1,0,0,0,198,969,1,
		0,0,0,200,986,1,0,0,0,202,988,1,0,0,0,204,206,3,2,1,0,205,204,1,0,0,0,
		205,206,1,0,0,0,206,208,1,0,0,0,207,209,3,6,3,0,208,207,1,0,0,0,208,209,
		1,0,0,0,209,211,1,0,0,0,210,212,3,8,4,0,211,210,1,0,0,0,211,212,1,0,0,
		0,212,1,1,0,0,0,213,215,3,4,2,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,
		1,0,0,0,216,217,1,0,0,0,217,3,1,0,0,0,218,219,5,45,0,0,219,220,3,198,99,
		0,220,221,5,120,0,0,221,5,1,0,0,0,222,223,5,49,0,0,223,224,3,198,99,0,
		224,225,5,120,0,0,225,7,1,0,0,0,226,228,3,10,5,0,227,226,1,0,0,0,228,229,
		1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,9,1,0,0,0,231,236,3,24,12,
		0,232,236,3,56,28,0,233,236,3,64,32,0,234,236,3,66,33,0,235,231,1,0,0,
		0,235,232,1,0,0,0,235,233,1,0,0,0,235,234,1,0,0,0,236,11,1,0,0,0,237,239,
		3,14,7,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,
		0,241,13,1,0,0,0,242,240,1,0,0,0,243,248,3,16,8,0,244,248,5,1,0,0,245,
		248,5,28,0,0,246,248,5,68,0,0,247,243,1,0,0,0,247,244,1,0,0,0,247,245,
		1,0,0,0,247,246,1,0,0,0,248,15,1,0,0,0,249,250,7,0,0,0,250,17,1,0,0,0,
		251,252,5,119,0,0,252,253,3,20,10,0,253,19,1,0,0,0,254,255,6,10,-1,0,255,
		256,3,182,91,0,256,262,1,0,0,0,257,258,10,1,0,0,258,259,5,121,0,0,259,
		261,3,182,91,0,260,257,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,
		1,0,0,0,263,21,1,0,0,0,264,262,1,0,0,0,265,266,7,1,0,0,266,23,1,0,0,0,
		267,269,3,12,6,0,268,270,5,57,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,
		271,1,0,0,0,271,272,3,22,11,0,272,274,5,140,0,0,273,275,3,186,93,0,274,
		273,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,278,3,18,9,0,277,276,1,
		0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,3,26,13,0,280,25,1,0,0,0,
		281,285,5,95,0,0,282,284,3,32,16,0,283,282,1,0,0,0,284,287,1,0,0,0,285,
		283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,291,5,
		96,0,0,289,291,5,120,0,0,290,281,1,0,0,0,290,289,1,0,0,0,291,27,1,0,0,
		0,292,294,3,30,15,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
		296,1,0,0,0,296,29,1,0,0,0,297,295,1,0,0,0,298,306,3,16,8,0,299,306,5,
		1,0,0,300,306,5,87,0,0,301,306,5,55,0,0,302,306,5,28,0,0,303,306,5,68,
		0,0,304,306,5,26,0,0,305,298,1,0,0,0,305,299,1,0,0,0,305,300,1,0,0,0,305,
		301,1,0,0,0,305,302,1,0,0,0,305,303,1,0,0,0,305,304,1,0,0,0,306,31,1,0,
		0,0,307,313,3,34,17,0,308,313,3,40,20,0,309,313,3,52,26,0,310,313,3,56,
		28,0,311,313,3,24,12,0,312,307,1,0,0,0,312,308,1,0,0,0,312,309,1,0,0,0,
		312,310,1,0,0,0,312,311,1,0,0,0,313,33,1,0,0,0,314,315,3,28,14,0,315,316,
		3,182,91,0,316,317,3,36,18,0,317,318,5,120,0,0,318,35,1,0,0,0,319,320,
		6,18,-1,0,320,321,3,38,19,0,321,327,1,0,0,0,322,323,10,1,0,0,323,324,5,
		121,0,0,324,326,3,38,19,0,325,322,1,0,0,0,326,329,1,0,0,0,327,325,1,0,
		0,0,327,328,1,0,0,0,328,37,1,0,0,0,329,327,1,0,0,0,330,333,5,140,0,0,331,
		332,5,133,0,0,332,334,3,200,100,0,333,331,1,0,0,0,333,334,1,0,0,0,334,
		39,1,0,0,0,335,336,3,28,14,0,336,337,3,182,91,0,337,338,5,140,0,0,338,
		339,5,95,0,0,339,340,3,42,21,0,340,341,5,96,0,0,341,41,1,0,0,0,342,344,
		3,44,22,0,343,342,1,0,0,0,344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,
		0,0,346,43,1,0,0,0,347,349,5,26,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,
		351,1,0,0,0,350,352,5,15,0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,
		0,0,0,353,355,5,35,0,0,354,356,3,46,23,0,355,354,1,0,0,0,355,356,1,0,0,
		0,356,357,1,0,0,0,357,367,3,50,25,0,358,360,5,26,0,0,359,358,1,0,0,0,359,
		360,1,0,0,0,360,361,1,0,0,0,361,363,5,65,0,0,362,364,3,46,23,0,363,362,
		1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,367,3,50,25,0,366,348,1,0,
		0,0,366,359,1,0,0,0,367,45,1,0,0,0,368,369,5,91,0,0,369,374,3,48,24,0,
		370,371,5,121,0,0,371,373,3,48,24,0,372,370,1,0,0,0,373,376,1,0,0,0,374,
		372,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,0,0,377,378,5,
		92,0,0,378,47,1,0,0,0,379,381,3,182,91,0,380,379,1,0,0,0,380,381,1,0,0,
		0,381,382,1,0,0,0,382,383,5,140,0,0,383,49,1,0,0,0,384,386,5,95,0,0,385,
		387,3,68,34,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,393,
		5,96,0,0,389,390,5,136,0,0,390,393,3,70,35,0,391,393,5,120,0,0,392,384,
		1,0,0,0,392,389,1,0,0,0,392,391,1,0,0,0,393,51,1,0,0,0,394,395,3,28,14,
		0,395,396,5,16,0,0,396,398,5,91,0,0,397,399,3,58,29,0,398,397,1,0,0,0,
		398,399,1,0,0,0,399,400,1,0,0,0,400,402,5,92,0,0,401,403,3,54,27,0,402,
		401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,3,62,31,0,405,53,1,
		0,0,0,406,407,5,119,0,0,407,408,7,2,0,0,408,409,3,166,83,0,409,55,1,0,
		0,0,410,412,3,28,14,0,411,413,5,4,0,0,412,411,1,0,0,0,412,413,1,0,0,0,
		413,414,1,0,0,0,414,415,3,180,90,0,415,417,5,140,0,0,416,418,3,186,93,
		0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,421,5,91,0,0,420,
		422,3,58,29,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,425,
		5,92,0,0,424,426,5,15,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,
		0,0,427,428,3,62,31,0,428,57,1,0,0,0,429,430,6,29,-1,0,430,431,3,60,30,
		0,431,437,1,0,0,0,432,433,10,1,0,0,433,434,5,121,0,0,434,436,3,60,30,0,
		435,432,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,59,
		1,0,0,0,439,437,1,0,0,0,440,442,5,56,0,0,441,440,1,0,0,0,441,442,1,0,0,
		0,442,443,1,0,0,0,443,444,3,182,91,0,444,447,5,140,0,0,445,446,5,122,0,
		0,446,448,3,200,100,0,447,445,1,0,0,0,447,448,1,0,0,0,448,61,1,0,0,0,449,
		451,5,95,0,0,450,452,3,68,34,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,
		1,0,0,0,453,458,5,96,0,0,454,455,5,136,0,0,455,458,3,70,35,0,456,458,5,
		120,0,0,457,449,1,0,0,0,457,454,1,0,0,0,457,456,1,0,0,0,458,63,1,0,0,0,
		459,460,5,76,0,0,460,461,5,140,0,0,461,462,5,122,0,0,462,463,3,198,99,
		0,463,464,5,120,0,0,464,65,1,0,0,0,465,467,3,16,8,0,466,465,1,0,0,0,466,
		467,1,0,0,0,467,468,1,0,0,0,468,469,5,25,0,0,469,470,5,140,0,0,470,471,
		3,18,9,0,471,472,3,26,13,0,472,67,1,0,0,0,473,474,6,34,-1,0,474,475,3,
		70,35,0,475,480,1,0,0,0,476,477,10,1,0,0,477,479,3,70,35,0,478,476,1,0,
		0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,69,1,0,0,0,482,
		480,1,0,0,0,483,486,3,72,36,0,484,486,3,82,41,0,485,483,1,0,0,0,485,484,
		1,0,0,0,486,71,1,0,0,0,487,488,3,74,37,0,488,73,1,0,0,0,489,490,3,76,38,
		0,490,491,5,120,0,0,491,75,1,0,0,0,492,493,3,182,91,0,493,494,3,78,39,
		0,494,77,1,0,0,0,495,496,6,39,-1,0,496,497,3,80,40,0,497,503,1,0,0,0,498,
		499,10,1,0,0,499,500,5,121,0,0,500,502,3,80,40,0,501,498,1,0,0,0,502,505,
		1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,79,1,0,0,0,505,503,1,0,0,0,
		506,511,5,140,0,0,507,508,5,140,0,0,508,509,5,122,0,0,509,511,3,124,62,
		0,510,506,1,0,0,0,510,507,1,0,0,0,511,81,1,0,0,0,512,530,3,84,42,0,513,
		530,3,86,43,0,514,530,3,88,44,0,515,530,3,96,48,0,516,530,3,98,49,0,517,
		530,3,100,50,0,518,530,3,108,54,0,519,530,3,110,55,0,520,530,3,112,56,
		0,521,530,3,114,57,0,522,530,3,122,61,0,523,525,5,95,0,0,524,526,3,68,
		34,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,530,5,96,0,0,
		528,530,5,120,0,0,529,512,1,0,0,0,529,513,1,0,0,0,529,514,1,0,0,0,529,
		515,1,0,0,0,529,516,1,0,0,0,529,517,1,0,0,0,529,518,1,0,0,0,529,519,1,
		0,0,0,529,520,1,0,0,0,529,521,1,0,0,0,529,522,1,0,0,0,529,523,1,0,0,0,
		529,528,1,0,0,0,530,83,1,0,0,0,531,532,3,124,62,0,532,533,5,120,0,0,533,
		85,1,0,0,0,534,535,5,36,0,0,535,536,5,91,0,0,536,537,3,124,62,0,537,538,
		5,92,0,0,538,541,3,82,41,0,539,540,5,23,0,0,540,542,3,82,41,0,541,539,
		1,0,0,0,541,542,1,0,0,0,542,87,1,0,0,0,543,544,5,71,0,0,544,545,5,91,0,
		0,545,546,3,124,62,0,546,547,5,92,0,0,547,551,5,95,0,0,548,550,3,90,45,
		0,549,548,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,
		554,1,0,0,0,553,551,1,0,0,0,554,555,5,96,0,0,555,89,1,0,0,0,556,558,3,
		92,46,0,557,556,1,0,0,0,558,559,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,
		0,560,561,1,0,0,0,561,562,3,68,34,0,562,91,1,0,0,0,563,564,5,10,0,0,564,
		566,3,124,62,0,565,567,3,94,47,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,
		1,0,0,0,568,569,5,119,0,0,569,573,1,0,0,0,570,571,5,19,0,0,571,573,5,119,
		0,0,572,563,1,0,0,0,572,570,1,0,0,0,573,93,1,0,0,0,574,575,5,89,0,0,575,
		576,3,124,62,0,576,95,1,0,0,0,577,578,5,90,0,0,578,579,5,91,0,0,579,580,
		3,124,62,0,580,581,5,92,0,0,581,582,3,82,41,0,582,97,1,0,0,0,583,584,5,
		21,0,0,584,585,3,82,41,0,585,586,5,90,0,0,586,587,5,91,0,0,587,588,3,124,
		62,0,588,589,5,92,0,0,589,590,5,120,0,0,590,99,1,0,0,0,591,592,5,33,0,
		0,592,594,5,91,0,0,593,595,3,102,51,0,594,593,1,0,0,0,594,595,1,0,0,0,
		595,596,1,0,0,0,596,598,5,120,0,0,597,599,3,104,52,0,598,597,1,0,0,0,598,
		599,1,0,0,0,599,600,1,0,0,0,600,602,5,120,0,0,601,603,3,106,53,0,602,601,
		1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,5,92,0,0,605,606,3,82,
		41,0,606,101,1,0,0,0,607,617,3,76,38,0,608,613,3,124,62,0,609,610,5,121,
		0,0,610,612,3,124,62,0,611,609,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,
		613,614,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,616,607,1,0,0,0,616,608,
		1,0,0,0,617,103,1,0,0,0,618,619,3,124,62,0,619,105,1,0,0,0,620,625,3,124,
		62,0,621,622,5,121,0,0,622,624,3,124,62,0,623,621,1,0,0,0,624,627,1,0,
		0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,107,1,0,0,0,627,625,1,0,0,0,628,
		629,5,34,0,0,629,630,5,91,0,0,630,631,3,182,91,0,631,632,5,140,0,0,632,
		633,5,37,0,0,633,634,3,124,62,0,634,635,5,92,0,0,635,636,3,82,41,0,636,
		109,1,0,0,0,637,639,5,63,0,0,638,640,3,124,62,0,639,638,1,0,0,0,639,640,
		1,0,0,0,640,641,1,0,0,0,641,642,5,120,0,0,642,111,1,0,0,0,643,645,5,73,
		0,0,644,646,3,124,62,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,
		647,648,5,120,0,0,648,113,1,0,0,0,649,650,5,75,0,0,650,656,3,82,41,0,651,
		653,3,116,58,0,652,654,3,120,60,0,653,652,1,0,0,0,653,654,1,0,0,0,654,
		657,1,0,0,0,655,657,3,120,60,0,656,651,1,0,0,0,656,655,1,0,0,0,657,115,
		1,0,0,0,658,659,5,11,0,0,659,660,5,91,0,0,660,662,3,182,91,0,661,663,5,
		140,0,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,666,5,92,0,
		0,665,667,3,118,59,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,
		669,3,68,34,0,669,117,1,0,0,0,670,671,5,89,0,0,671,672,5,91,0,0,672,673,
		3,124,62,0,673,674,5,92,0,0,674,119,1,0,0,0,675,676,5,29,0,0,676,677,3,
		68,34,0,677,121,1,0,0,0,678,679,5,85,0,0,679,680,5,91,0,0,680,681,3,124,
		62,0,681,682,5,92,0,0,682,683,3,82,41,0,683,123,1,0,0,0,684,687,3,126,
		63,0,685,687,3,130,65,0,686,684,1,0,0,0,686,685,1,0,0,0,687,125,1,0,0,
		0,688,689,3,198,99,0,689,690,3,128,64,0,690,691,3,124,62,0,691,127,1,0,
		0,0,692,693,7,3,0,0,693,129,1,0,0,0,694,695,3,132,66,0,695,131,1,0,0,0,
		696,702,3,134,67,0,697,698,5,118,0,0,698,699,3,172,86,0,699,700,5,119,
		0,0,700,701,3,172,86,0,701,703,1,0,0,0,702,697,1,0,0,0,702,703,1,0,0,0,
		703,133,1,0,0,0,704,707,3,136,68,0,705,706,5,135,0,0,706,708,3,134,67,
		0,707,705,1,0,0,0,707,708,1,0,0,0,708,135,1,0,0,0,709,714,3,138,69,0,710,
		711,5,113,0,0,711,713,3,138,69,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,
		1,0,0,0,714,715,1,0,0,0,715,137,1,0,0,0,716,714,1,0,0,0,717,722,3,140,
		70,0,718,719,5,111,0,0,719,721,3,140,70,0,720,718,1,0,0,0,721,724,1,0,
		0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,139,1,0,0,0,724,722,1,0,0,0,725,
		730,3,142,71,0,726,727,5,112,0,0,727,729,3,142,71,0,728,726,1,0,0,0,729,
		732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,141,1,0,0,0,732,730,1,
		0,0,0,733,738,3,144,72,0,734,735,5,114,0,0,735,737,3,144,72,0,736,734,
		1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,143,1,0,0,
		0,740,738,1,0,0,0,741,746,3,146,73,0,742,743,5,110,0,0,743,745,3,146,73,
		0,744,742,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,
		145,1,0,0,0,748,746,1,0,0,0,749,754,3,148,74,0,750,751,7,4,0,0,751,753,
		3,148,74,0,752,750,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,
		0,0,755,147,1,0,0,0,756,754,1,0,0,0,757,762,3,150,75,0,758,759,7,5,0,0,
		759,761,3,150,75,0,760,758,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,
		763,1,0,0,0,763,149,1,0,0,0,764,762,1,0,0,0,765,770,3,152,76,0,766,767,
		7,6,0,0,767,769,3,152,76,0,768,766,1,0,0,0,769,772,1,0,0,0,770,768,1,0,
		0,0,770,771,1,0,0,0,771,151,1,0,0,0,772,770,1,0,0,0,773,778,3,154,77,0,
		774,775,7,7,0,0,775,777,3,154,77,0,776,774,1,0,0,0,777,780,1,0,0,0,778,
		776,1,0,0,0,778,779,1,0,0,0,779,153,1,0,0,0,780,778,1,0,0,0,781,786,3,
		156,78,0,782,783,7,8,0,0,783,785,3,156,78,0,784,782,1,0,0,0,785,788,1,
		0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,155,1,0,0,0,788,786,1,0,0,0,
		789,810,3,158,79,0,790,791,5,103,0,0,791,810,3,156,78,0,792,793,5,105,
		0,0,793,810,3,156,78,0,794,795,5,115,0,0,795,810,3,156,78,0,796,797,5,
		117,0,0,797,810,3,156,78,0,798,799,5,104,0,0,799,810,3,156,78,0,800,801,
		5,106,0,0,801,810,3,156,78,0,802,803,5,91,0,0,803,804,3,182,91,0,804,805,
		5,92,0,0,805,806,3,156,78,0,806,810,1,0,0,0,807,808,5,5,0,0,808,810,3,
		156,78,0,809,789,1,0,0,0,809,790,1,0,0,0,809,792,1,0,0,0,809,794,1,0,0,
		0,809,796,1,0,0,0,809,798,1,0,0,0,809,800,1,0,0,0,809,802,1,0,0,0,809,
		807,1,0,0,0,810,157,1,0,0,0,811,815,3,160,80,0,812,814,3,162,81,0,813,
		812,1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,832,1,
		0,0,0,817,815,1,0,0,0,818,823,3,164,82,0,819,823,3,166,83,0,820,823,5,
		104,0,0,821,823,5,106,0,0,822,818,1,0,0,0,822,819,1,0,0,0,822,820,1,0,
		0,0,822,821,1,0,0,0,823,827,1,0,0,0,824,826,3,162,81,0,825,824,1,0,0,0,
		826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,831,1,0,0,0,829,827,
		1,0,0,0,830,822,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,
		0,833,159,1,0,0,0,834,832,1,0,0,0,835,842,3,200,100,0,836,842,3,198,99,
		0,837,838,5,50,0,0,838,839,3,182,91,0,839,840,3,166,83,0,840,842,1,0,0,
		0,841,835,1,0,0,0,841,836,1,0,0,0,841,837,1,0,0,0,842,161,1,0,0,0,843,
		844,5,93,0,0,844,849,3,124,62,0,845,846,5,121,0,0,846,848,3,124,62,0,847,
		845,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,852,1,
		0,0,0,851,849,1,0,0,0,852,853,5,94,0,0,853,163,1,0,0,0,854,855,5,139,0,
		0,855,856,5,140,0,0,856,165,1,0,0,0,857,859,5,91,0,0,858,860,3,168,84,
		0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,862,5,92,0,0,862,
		167,1,0,0,0,863,864,6,84,-1,0,864,865,3,170,85,0,865,871,1,0,0,0,866,867,
		10,1,0,0,867,868,5,121,0,0,868,870,3,170,85,0,869,866,1,0,0,0,870,873,
		1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,169,1,0,0,0,873,871,1,0,0,
		0,874,875,5,140,0,0,875,877,5,119,0,0,876,874,1,0,0,0,876,877,1,0,0,0,
		877,878,1,0,0,0,878,879,3,124,62,0,879,171,1,0,0,0,880,883,3,124,62,0,
		881,883,3,174,87,0,882,880,1,0,0,0,882,881,1,0,0,0,883,173,1,0,0,0,884,
		886,5,73,0,0,885,887,3,124,62,0,886,885,1,0,0,0,886,887,1,0,0,0,887,175,
		1,0,0,0,888,890,3,178,89,0,889,888,1,0,0,0,890,891,1,0,0,0,891,889,1,0,
		0,0,891,892,1,0,0,0,892,177,1,0,0,0,893,894,5,116,0,0,894,896,3,198,99,
		0,895,897,3,166,83,0,896,895,1,0,0,0,896,897,1,0,0,0,897,179,1,0,0,0,898,
		901,3,182,91,0,899,901,5,88,0,0,900,898,1,0,0,0,900,899,1,0,0,0,901,181,
		1,0,0,0,902,904,5,15,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,
		0,905,909,3,190,95,0,906,908,3,184,92,0,907,906,1,0,0,0,908,911,1,0,0,
		0,909,907,1,0,0,0,909,910,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,912,
		914,5,118,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,934,1,0,0,0,915,917,
		5,15,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,920,3,198,
		99,0,919,921,3,186,93,0,920,919,1,0,0,0,920,921,1,0,0,0,921,925,1,0,0,
		0,922,924,3,184,92,0,923,922,1,0,0,0,924,927,1,0,0,0,925,923,1,0,0,0,925,
		926,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,928,930,5,118,0,0,929,928,
		1,0,0,0,929,930,1,0,0,0,930,934,1,0,0,0,931,934,5,86,0,0,932,934,5,15,
		0,0,933,903,1,0,0,0,933,916,1,0,0,0,933,931,1,0,0,0,933,932,1,0,0,0,934,
		183,1,0,0,0,935,936,5,93,0,0,936,937,5,94,0,0,937,185,1,0,0,0,938,939,
		5,97,0,0,939,940,3,188,94,0,940,941,5,99,0,0,941,187,1,0,0,0,942,943,6,
		94,-1,0,943,944,5,140,0,0,944,950,1,0,0,0,945,946,10,1,0,0,946,947,5,121,
		0,0,947,949,5,140,0,0,948,945,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,
		950,951,1,0,0,0,951,189,1,0,0,0,952,950,1,0,0,0,953,962,3,192,96,0,954,
		962,3,194,97,0,955,962,3,196,98,0,956,962,5,52,0,0,957,959,5,60,0,0,958,
		960,3,186,93,0,959,958,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,961,953,
		1,0,0,0,961,954,1,0,0,0,961,955,1,0,0,0,961,956,1,0,0,0,961,957,1,0,0,
		0,962,191,1,0,0,0,963,964,7,9,0,0,964,193,1,0,0,0,965,966,7,10,0,0,966,
		195,1,0,0,0,967,968,7,11,0,0,968,197,1,0,0,0,969,970,6,99,-1,0,970,971,
		5,140,0,0,971,977,1,0,0,0,972,973,10,1,0,0,973,974,5,139,0,0,974,976,5,
		140,0,0,975,972,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,
		0,978,199,1,0,0,0,979,977,1,0,0,0,980,987,3,202,101,0,981,987,5,141,0,
		0,982,987,5,142,0,0,983,987,5,143,0,0,984,987,5,144,0,0,985,987,5,51,0,
		0,986,980,1,0,0,0,986,981,1,0,0,0,986,982,1,0,0,0,986,983,1,0,0,0,986,
		984,1,0,0,0,986,985,1,0,0,0,987,201,1,0,0,0,988,989,7,12,0,0,989,203,1,
		0,0,0,106,205,208,211,216,229,235,240,247,262,269,274,277,285,290,295,
		305,312,327,333,345,348,351,355,359,363,366,374,380,386,392,398,402,412,
		417,421,425,437,441,447,451,457,466,480,485,503,510,525,529,541,551,559,
		566,572,594,598,602,613,616,625,639,645,653,656,662,666,686,702,707,714,
		722,730,738,746,754,762,770,778,786,809,815,822,827,832,841,849,859,871,
		876,882,886,891,896,900,903,909,913,916,920,925,929,933,950,959,961,977,
		986
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CxCompiler.Grammar
